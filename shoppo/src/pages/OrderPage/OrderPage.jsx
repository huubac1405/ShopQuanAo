
import React, { useState, useEffect } from 'react';
import { useLocation } from "react-router-dom";
import { useSelector } from "react-redux";
import styles from './OrderPage.module.css';

function OrderPage() {
  const location = useLocation();
  const { directProduct } = location.state || {}; // L·∫•y s·∫£n ph·∫©m t·ª´ "Mua ngay"
  const user = useSelector((state) => state.user);
  
  const [products, setProducts] = useState([]);
  const [name, setName] = useState('');
  const [phone, setPhone] = useState('');
  const [province, setProvince] = useState('');
  const [address, setAddress] = useState('');
  const [district, setDistrict] = useState('');
  const [ward, setWard] = useState('');
  const [paymentMethod, setPaymentMethod] = useState('cod');

  useEffect(() => {
    console.log("directProduct:", directProduct);  // üõ† Ki·ªÉm tra d·ªØ li·ªáu ƒë∆∞·ª£c truy·ªÅn qua
    console.log("User ID:", user.id);
  
    if (!user.id) return;
  
    if (!directProduct) {
      fetch(`${import.meta.env.VITE_API_URL}/cart/${user.id}`)
        .then(res => res.json())
        .then(data => setProducts(data.items))
        .catch(err => console.error("L·ªói khi l·∫•y gi·ªè h√†ng:", err));
    } else {
      setProducts([directProduct]);  // ‚úÖ G√°n s·∫£n ph·∫©m mua ngay v√†o danh s√°ch
    }
  }, [user.id, directProduct]);
  

  const totalAmount = products.reduce((sum, item) => sum + item.product.price * item.quantity, 0);

  const handlePlaceOrder = async () => {
    if (products.length === 0) {
      alert("Kh√¥ng c√≥ s·∫£n ph·∫©m ƒë·ªÉ ƒë·∫∑t h√†ng!");
      return;
    }
  
    console.log("üîç Danh s√°ch s·∫£n ph·∫©m:", products);
  
    const orderData = {
      userId: user.id,
      items: products.map(item => {
        if (!item.product || !item.product._id) {
          console.error("‚ùå L·ªói: s·∫£n ph·∫©m kh√¥ng c√≥ ID!", item);
          return null;
        }
        return {
          productId: item.product._id, // üî• ƒê·ªïi t·ª´ id -> _id
          color: item.color || "",
          size: item.size || "",
          quantity: item.quantity || 1
        };
      }).filter(item => item !== null),
      total: totalAmount,
      shippingInfo: { name, phone, province, district, ward, address },
      paymentMethod
    };
  
    console.log("üõí Order Data g·ª≠i ƒëi:", orderData);
  
    try {
      const response = await fetch(`${import.meta.env.VITE_API_URL}/order/create`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(orderData)
      });
  
      const result = await response.json();
  
      if (response.ok) {
        alert('ƒê·∫∑t h√†ng th√†nh c√¥ng!');
      } else {
        alert(result.message || "C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng.");
      }
    } catch (error) {
      console.error('‚ùå L·ªói ƒë·∫∑t h√†ng:', error);
    }
  };
  
  
  

  return (
    <div className={styles.orderPage}>
      <div className={styles.productList}>
        <h2>{products.length} s·∫£n ph·∫©m</h2>
        {products.map((product, index) => (
          <div key={index} className={styles.productItem}>
            <img src={`http://localhost:5000${product.product.image}`} alt={product.product.name} className={styles.productImage} />
            <div className={styles.productDetails}>
              <h3>{product.product.name}</h3>
              <p>M√†u s·∫Øc: {product.color}</p>
              <p>K√≠ch th∆∞·ªõc: {product.size}</p>
              <p>S·ªë l∆∞·ª£ng: {product.quantity}</p>
              <p className={styles.price}>
                Gi√°: {product.product.price.toLocaleString()}‚Ç´
              </p>
              <p className={styles.price}>
                Th√†nh ti·ªÅn: {(product.product.price * product.quantity).toLocaleString()}‚Ç´
              </p>
            </div>
          </div>
        ))}
      </div>

      <div className={styles.shippingInfo}>
        <h2>TH√îNG TIN GIAO H√ÄNG</h2>
        <div className={styles.formGroup}>
          <label>H·ªç v√† t√™n</label>
          <input type="text" value={name} onChange={e => setName(e.target.value)} />
        </div>
        <div className={styles.formGroup}>
          <label>S·ªë ƒëi·ªán tho·∫°i</label>
          <input type="tel" value={phone} onChange={e => setPhone(e.target.value)} />
        </div>
        <div className={styles.formGroup}>
          <label>ƒê·ªãa ch·ªâ</label>
          <input type="text" value={address} onChange={e => setAddress(e.target.value)} />
        </div>
        <div className={styles.formGroup}>
          <label>T·ªânh/Th√†nh ph·ªë</label>
          <input type="text" value={province} onChange={e => setProvince(e.target.value)} />
        </div>
        <div className={styles.formGroup}>
          <label>Qu·∫≠n/Huy·ªán</label>
          <input type="text" value={district} onChange={e => setDistrict(e.target.value)} />
        </div>
        <div className={styles.formGroup}>
          <label>Ph∆∞·ªùng/X√£</label>
          <input type="text" value={ward} onChange={e => setWard(e.target.value)} />
        </div>
      </div>

      <div className={styles.orderSummaryRight}>
        <div className={styles.summarySection}>
          <h2>T·∫†M T√çNH</h2>
          <p>T·ªïng ti·ªÅn: {totalAmount.toLocaleString()}‚Ç´</p>
        </div>

        <div className={styles.paymentSection}>
          <h2>PH∆Ø∆†NG TH·ª®C THANH TO√ÅN</h2>
          <label>
            <input type="radio" name="payment" value="cod" checked={paymentMethod === 'cod'} onChange={() => setPaymentMethod('cod')} /> Thanh to√°n khi nh·∫≠n h√†ng
          </label>
          <label>
            <input type="radio" name="payment" value="bank" checked={paymentMethod === 'bank'} onChange={() => setPaymentMethod('bank')} /> Chuy·ªÉn kho·∫£n ng√¢n h√†ng
          </label>
        </div>

        <button className={styles.placeOrder} onClick={handlePlaceOrder}>ƒê·∫∂T H√ÄNG ({totalAmount.toLocaleString()}‚Ç´)</button>
      </div>
    </div>
  );
}

export default OrderPage;







