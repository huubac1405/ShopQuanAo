
const Order = require("../models/OrderModel");
const Cart = require("../models/CartModel");
const Product = require("../models/ProductModel"); // Import Product

const createOrder = async (req, res) => {
  try {
    const { userId, shippingInfo, items, total } = req.body;

    if (!items || items.length === 0) {
      return res.status(400).json({ message: "Gi·ªè h√†ng tr·ªëng!" });
    }

    // üî• Debug log ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
    console.log("Received order:", req.body);

    let totalPrice = total; // ‚úÖ S·ª≠ d·ª•ng gi√° tr·ªã total t·ª´ request

    // Ki·ªÉm tra t·ª´ng s·∫£n ph·∫©m
    const processedItems = await Promise.all(items.map(async (item) => {
      const product = await Product.findById(item.productId).populate("variants");

      if (!product) {
        return res.status(400).json({ message: `S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!` });
      }

      const variant = product.variants.find(
        (v) => v.color === item.color && v.size === item.size
      );

      if (!variant) {
        return res.status(400).json({ message: `Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ s·∫£n ph·∫©m!` });
      }

      if (variant.countInStock < item.quantity) {
        return res.status(400).json({ message: `S·∫£n ph·∫©m kh√¥ng ƒë·ªß h√†ng!` });
      }

      // Gi·∫£m s·ªë l∆∞·ª£ng t·ªìn kho
      variant.countInStock -= item.quantity;
      await product.save();

      return {
        product: product._id,
        color: item.color,
        size: item.size,
        quantity: item.quantity,
        price: product.price, // ‚úÖ ƒê·∫£m b·∫£o c√≥ gi√°
      };
    }));

    // ‚úÖ Ki·ªÉm tra l·∫°i totalPrice tr∆∞·ªõc khi l∆∞u
    if (isNaN(totalPrice) || totalPrice <= 0) {
      return res.status(400).json({ message: "T·ªïng ti·ªÅn kh√¥ng h·ª£p l·ªá!" });
    }

    // T·∫°o ƒë∆°n h√†ng m·ªõi
    const newOrder = new Order({
      user: userId,
      items: processedItems,
      shippingInfo,
      totalPrice,
      shippingFee: 0,
    });

    await newOrder.save();

    res.status(201).json({ message: "ƒê·∫∑t h√†ng th√†nh c√¥ng!", order: newOrder });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};


// L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng
const getOrdersByUser = async (req, res) => {
  try {
    const { userId } = req.params;
    const orders = await Order.find({ user: userId }).sort({ createdAt: -1 });
    res.status(200).json(orders);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
const updateOrderStatus = async (req, res) => {
  try {
    const { orderId, status } = req.body;
    const validStatuses = ["Ch·ªù x√°c nh·∫≠n", "ƒêang chu·∫©n b·ªã", "ƒêang giao", "ƒê√£ giao", "ƒê√£ h·ªßy"];

    if (!validStatuses.includes(status)) {
      return res.status(400).json({ message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá!" });
    }

    const order = await Order.findById(orderId);
    if (!order) return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i!" });

    order.orderStatus = status;
    await order.save();

    res.status(200).json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng!", order });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// X√≥a ƒë∆°n h√†ng
const deleteOrder = async (req, res) => {
  try {
    const { orderId } = req.params;
    const order = await Order.findByIdAndDelete(orderId);

    if (!order) return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i!" });

    res.status(200).json({ message: "X√≥a ƒë∆°n h√†ng th√†nh c√¥ng!" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

const getAllOrders = async (req, res) => {
  try {
    const order = await Order.find().sort({ createdAt: -1 }); 
    res.status(200).json({
      success: true,
      data: order,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng",
      error: error.message,
    });
  }
};



module.exports = { createOrder, getOrdersByUser, updateOrderStatus, deleteOrder, getAllOrders };
